const express = require('express')
const uuid = require('uuid')
const connectToLnNode = require('@radar/lnrpc')

async function start () {
  const app = express()
  const purchaseCompleted = {} // Use a real DB in production
  const lnRpc = await connectToLnNode({
    server: 'localhost:10009', // 10009 is the GRPC port
    tls: './tls.cert', // Generated by LND
    macaroonPath: './admin.macaroon' // Generated by LND
  })
  const invoiceStream = await lnRpc.subscribeInvoices()
  invoiceStream.on('data', invoice => {
    console.log('Invoice:', invoice)
    if (invoice.settled) { // "Settled" means paid
      const purchaseId = invoice.memo.split('||')[1].trim() // Parse purchase ID out of invoice memo
      purchaseCompleted[purchaseId] = true // Mark purchase as paid
    }
  })
  app.get('/data', async (req, res) => {
    const purchaseId = req.header('X-Purchase-Id') // Read HTTP header
    if (purchaseId) { // Client has supplied a purchase ID
      // Existing purchase
      console.log('Checking purchase', purchaseId)
      if (purchaseCompleted[purchaseId]) { // Check whether purchase has been paid for
        res.send('15 degrees Celsius, cloudy and with a chance of lightning.')
      } else {
        res.status(400).send('Error: Invoice has not been paid')
      }
    } else {
      // New purchase
      const purchaseId = uuid.v4() // Generate random new UUID
      console.log('New purchase', purchaseId)
      const invoice = await lnRpc.addInvoice({
        value: 1, // 1 satoshi == 1/100 millionth of 1 Bitcoin
        memo: `Weather report || ${purchaseId}` // Include purchase ID in memo so we can parse it out later
      })
      res.status(402) // HTTP 402 Payment Required
        .header('X-Purchase-Id', purchaseId) // Return purchase ID in X-Purchase-Id HTTP header
        .send(`${invoice.paymentRequest}\n`) // Send Lightning payment request in HTTP body
    }
  })

  app.listen(8000)
}

start().then(() => console.log('Listening on :8000'))
